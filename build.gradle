buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.gretty:gretty:4.0.3"
  }
}

plugins {
	id 'java'
	id 'war'
	// id "org.gretty"
	// Provide convenience executables for trying out the examples.
	id 'application'
	// Generate Visual Studio Code .vscode & .json project files
	id "visual-studio"
}

apply plugin: "org.gretty"

repositories {
    mavenCentral()
    mavenLocal()
    maven {
    	url = System.getenv("GITHUB_DEPLOY_REPOSITORY") ?: System.properties['deploy.repository'] ?: 'https://maven.pkg.github.com'
        credentials {
        	username = System.getenv("GITHUB_DEPLOY_USER") ?: System.properties['deploy.user']
            password = System.getenv("GITHUB_DEPLOY_TOKEN") ?: System.properties['deploy.token'] 
		}
	}
     maven {
    	url = "https://maven.pkg.github.com/Systemhaus-Westfalia/shw-customizations"
        credentials {
        	username = System.getenv("GITHUB_DEPLOY_USER") ?: System.properties['deploy.user']
            password = System.getenv("GITHUB_DEPLOY_TOKEN") ?: System.properties['deploy.token'] 
		}
     }
}

sourceCompatibility = 1.11

def baseVersion = '3.9.4'
def baseGroupId = 'io.github.adempiere'
def customBaseVersion = "adempiere-3.9.4"

dependencies {
    implementation fileTree(
        dir: 'lib',
        include: [
            '*.jar'
        ]
    )
implementation 'org.shw:shw-customizations.shw_libs:1.0.1'
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'src/main/webapp/WEB-INF/src'
            srcDirs 'client/src/main/java'
        }
        resources {
            srcDirs 'client/src/main/java'
			srcDirs 'src/main/webapp'
			srcDirs 'src/main/webapp/WEB-INF/src/'
            include 'org/compiere/images/**.*'
            include 'org/adempiere/plaf/icons/**.*'
            include 'org/compiere/plaf/sounds/**.*'
            include 'org/compiere/**.*'
            include 'org/compiere/db/**.*'
            include 'org/compiere/install/**.*'
            include 'index.zul'
            include 'theme.zs'
            include 'timeout.zul'
            include 'css/**.*'
            include 'images/**.*'
            include 'images/dark/**.*'
            include 'theme/default/css/**.*'
            include 'theme/default/images/**.*'
            include 'theme/default/images/zk/**.*'
            include 'theme/default/images/zkex/layout/**.*'
            include 'theme/default/images/zweb/**.*'
            include 'theme/default/images/zul/**.*'
            include 'theme/default/images/zul/button/**.*'
            include 'theme/default/images/zul/cal/**.*'
            include 'theme/default/images/zul/common/**.*'
            include 'theme/default/images/zul/grid/**.*'
            include 'theme/default/images/zul/groupbox/**.*'
            include 'theme/default/images/zul/input/**.*'
            include 'theme/default/images/zul/menu/**.*'
            include 'theme/default/images/zul/misc/**.*'
            include 'theme/default/images/zul/msgbox/**.*'
            include 'theme/default/images/zul/paging/**.*'
            include 'theme/default/images/zul/popup/**.*'
            include 'theme/default/images/zul/slider/**.*'
            include 'theme/default/images/zul/sort/**.*'
            include 'theme/default/images/zul/splt/**.*'
            include 'theme/default/images/zul/tab/**.*'
            include 'theme/default/images/zul/tree/**.*'
            include 'theme/default/images/zul/vd/**.*'
            include 'theme/default/images/zul/wnd/**.*'
            include 'js/**.*'
            include 'css/**.*'
            include 'zul/**.*'
            include 'org/adempiere/legacy/apache/ecs/ecs.properties'
            include 'org/adempiere/version.properties'
        }
    }
}

startScripts.enabled = false

ext {
	javaMainClass = "org.adempiere.Adempiere"
}

application {
	// mainClass = javaMainClass
	mainClass.set(javaMainClass)
}
jar {
	manifest {
		attributes(
			"Main-Class": javaMainClass
		)
	}
}

task startJettyRunner(type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	mainClass = 'org.eclipse.jetty.runner.Runner'
	//args '--path', "/${rootProject.name}", 'zkwebui/WEB-INF'
//	to enable websockets
//	args '--path', "/${rootProject.name}", 'jetty-dev-context.xml'
}

//applicationDistribution.into('bin') {
//	from(startJettyRunner)
//	fileMode = 0755
//}

//	Create release for project
task createRelease(type: Copy) {
   dependsOn build
   from file("$buildDir/distributions/")
   from file("$buildDir/libs/")
   into file("$buildDir/release/")
   doLast {
        file('build/release/')
        	.listFiles({file -> file.isFile()} as FileFilter).sort()
        	.each { File file ->
            ant.checksum file: file
        }
   	}
}
